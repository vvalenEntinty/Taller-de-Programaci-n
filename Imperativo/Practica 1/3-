program ejercicio3;
const
	max_genero=8;
type
	rango_genero=1..max_genero;

	pelicula=record
		codigo:integer;
		genero:rango_genero;
		puntajeProm:real;
	end;
	
	lista=^nodo;
	nodo=record
		dato:pelicula;
		sig:lista;
	end;
	
	vector_listas=array[rango_genero] of lista;
	vector_pelis=array [rango_genero] of pelicula;
	
	procedure leerPelicula (var p:pelicula);
	begin
		writeln('Ingresar el codigo de pelicula');readln(p.codigo);
		writeln('Ingresar el genero');readln(p.genero);
		writeln('Ingresar el puntaje promedio');readln(p.puntajeProm);
	end;
			
	procedure AgregarAtras (var l,ult:lista; p:pelicula);
	var
		nue:vector;
	begin
		new (nue);
		nue^.dato:=p;
		nue^.sig:=nil;
		if (l=nue)then
			ult^.sig:=nue;
		ult:=nue;
	end;
	
	procedure inicializarVector (var v:vector_listas);
	var
		i:rango_genero;
	begin
		for i := 1 to max_genero do
		begin
			v[i]:=nil;
		end;
	end;
	
	
	procedure cargarPeliculas (var v:vector_listas);
	var
		ult:vector_listas;
		p:pelicula;
	begin
		inicializarVector(v); {inicializo todas las posiciones del vector en nil}

		LeerPelicula(p);
		while (p.codigo <> - 1) do
		begin
			AgregarAtras(v[p.genero],ult[p.genero],p); {cargo por orden de llegada en el vector}
			LeerPelicula(p);
		end;
	end;
	

	
	procedure calcularMaximo (l:lista; var peliMax:pelicula);
	var
		max:real;
	begin
	max:=-9999;
		while (l<>nil) do
		begin
			if (l^.dato.puntajeProm > max) then
			begin
				max:=l^.dato.puntajeProm;
				peliMax:=l^.dato;
			end;	
			l:=l^.sig;
		end;
	end;
	
	procedure MayorPuntaje (v:vector_listas; var vPuntaje:vector_pelis);
	var
		i:rango_genero;
		peliMax:pelicula;
	begin
		for i := 1 to max_genero do
		begin
			calcularMaximo(v[i],peliMax);
			vPuntaje[i]:=peliMax;
		end;
	end;
	
	procedure ordenarPeliculas (var v:vector_pelis);
	var
		i,j:rango_genero;
	begin
		for i :=  1 to max_genero-1 do
		begin
		
			for j:= i to max_genero do
		
		
		end;
	end;
	
var
	vecPeliculas:vector_listas;
	vecPelisMax:vector_pelis;
begin
	cargarPeliculas(vecPeliculas);
	mayorPuntaje(vecPeliculas,vecPelisMax);
	ordenarPeliculas(vecPelisMax);
	
	
	{Imprimir(vector);}
end.
