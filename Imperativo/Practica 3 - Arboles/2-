program ejercicio;
type
	
	// registro para el arbol i
	venta=record
		codigo:integer;
		fecha:integer;
		cant_vendidas:integer;
	end;
	
	// primer arbol 
	arbol_i=^nodo_i;
	nodo_i=record
		dato:venta;
		hi:arbol_i;
		hd:arbol_i;
	end;
{---------------------------------------}	
	// registro para el arbol ii
	reg_ii=record
		codigo:integer;
		cant_vendidasTotal:integer;
	end;	
		
	// segundo arbol	
	arbol_ii =^nodo_ii;
	nodo_ii=record
		dato:reg_ii;
		hi:arbol_ii;
		hd:arbol_ii;
	end;	
{---------------------------------------}	
		// lista de ventas realizadas
		lista_ventas=^nodo;
		nodo=record
			dato:venta;
			sig:lista_ventas;
		end;
		
		// registro para el arbol iii
		reg_iii=record
		codigo:integer;
		cant_vendidasTotal:lista_ventas;
	end;	
	
	// segundo arbol	
	arbol_iii =^nodo_iii;
	nodo_iii=record
		dato:reg_ii;
		hi:arbol_iii;
		hd:arbol_iii;
	end;	
	
procedure cargarArboles (var ai:arbol_i; var aii:arbol_ii; var aiii:arbol_iii);

procedure leerVentas (var v:venta);
begin
	v.codigo:=random(100);
	v.fecha:=random(100);
	v.cant_vendidas:=random(100);
end;

procedure cargarArbol_i (var ai:arbol_i; v:venta);
begin
	if (ai =nil) then
	begin
		new(ai);
		ai^.dato:=v;
		ai^.hi:=nil;
		ai^.hd:=nil
	end
	else
		if (v.codigo < ai^.dato.codigo) then 
			cargarArbol_i(ai^.hi,v)
			else if (v.codigo >= ai^.dato.codigo) then
				cargarArbol_i(ai^.hd,v);
end;

procedure cargarArbol_ii (var aii:arbol_ii; v:venta);
begin
	if (aii =nil) then
	begin
		new(aii);
		aii^.dato.codigo:=v.codigo;
		aii^.dato.cant_vendidasTotal:=v.cant_vendidas;
		aii^.hi:=nil;
		aii^.hd:=nil
	end
	else
		if (v.codigo < aii^.dato.codigo) then 
			cargarArbol_ii(aii^.hi,v)
			else 
				cargarArbol_ii(aii^.hd,v);
end;


// cargarArbol_i	
var
	v:venta;
begin
	leerVentas(v);
	if (v.codigo <> 0) then 
		cargarArbol_i(ai,v);
		cargarArbol_ii(ai,v.codigo,v.cant_vendidas);
	end;
end;





var
	ai:arbol_i;
	aii:arbol_ii;
	aiii:arbol_iii;
begin
	randomize;
	cargarArboles(ai,aii,aii);
end.
